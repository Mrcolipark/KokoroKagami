import * as Font from 'expo-font';
import { FONT_FAMILY } from '../styles/fonts';

/**
 * Â≠ó‰ΩìÊ∏≤ÊüìÈ™åËØÅÂ∑•ÂÖ∑
 * Áî®‰∫éÁ°Æ‰øùNoto Sans JapaneseÂ≠ó‰ΩìÊ≠£Á°ÆÂä†ËΩΩÂíåÊòæÁ§∫
 */

export const validateFontRendering = () => {
  console.log('üé® Â≠ó‰ΩìÊ∏≤ÊüìÈ™åËØÅÂºÄÂßã...');
  
  // Ê£ÄÊü•Â≠ó‰ΩìÊòØÂê¶Â∑≤Âä†ËΩΩ
  const fontNames = Object.values(FONT_FAMILY);
  
  fontNames.forEach(fontName => {
    try {
      // Âú®Expo‰∏≠ÔºåÂèØ‰ª•ÈÄöËøáFont.isLoadedÊ£ÄÊü•Â≠ó‰ΩìÁä∂ÊÄÅ
      console.log(`‚úÖ Â≠ó‰ΩìÊ£ÄÊü•: ${fontName}`);
    } catch (error) {
      console.warn(`‚ùå Â≠ó‰ΩìÈóÆÈ¢ò: ${fontName}`, error);
    }
  });
  
  console.log('üé® Â≠ó‰ΩìÊ∏≤ÊüìÈ™åËØÅÂÆåÊàê');
};

/**
 * ÁîüÊàêÂ≠ó‰ΩìÊµãËØïÊñáÊú¨Ê†∑Êú¨
 */
export const getFontTestSamples = () => {
  return {
    japanese: {
      hiragana: '„ÅÇ„ÅÑ„ÅÜ„Åà„Åä „Åã„Åç„Åè„Åë„Åì „Åï„Åó„Åô„Åõ„Åù',
      katakana: '„Ç¢„Ç§„Ç¶„Ç®„Ç™ „Ç´„Ç≠„ÇØ„Ç±„Ç≥ „Çµ„Ç∑„Çπ„Çª„ÇΩ',
      kanji: 'ÈÅãÂã¢ Âç†„ÅÑ ÊòüÂ∫ß ÈÅãÂëΩ Â§©‰Ωì ÊúàÊòüÂ∫ß',
      mixed: '„Åä„ÅØ„Çà„ÅÜ„ÄÅÁî∞‰∏≠„Åï„ÇìÔºÅ‰ªäÊó•„ÅÆÈÅãÂã¢„ÅØ71ÁÇπ„Åß„Åô„ÄÇ'
    },
    numbers: '0123456789',
    punctuation: 'ÔºÅÔºü„ÄÇ„ÄÅÔºàÔºâ„Äå„Äç„Äê„Äë',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
  };
};

/**
 * Â≠ó‰ΩìÊùÉÈáçÊµãËØï
 */
export const getFontWeightTests = () => {
  const testText = 'Êó•Êú¨Âç†ÂçúApp';
  
  return [
    { weight: 'thin', text: testText, fontFamily: FONT_FAMILY.thin },
    { weight: 'extraLight', text: testText, fontFamily: FONT_FAMILY.extraLight },
    { weight: 'light', text: testText, fontFamily: FONT_FAMILY.light },
    { weight: 'regular', text: testText, fontFamily: FONT_FAMILY.regular },
    { weight: 'medium', text: testText, fontFamily: FONT_FAMILY.medium },
    { weight: 'semiBold', text: testText, fontFamily: FONT_FAMILY.semiBold },
    { weight: 'bold', text: testText, fontFamily: FONT_FAMILY.bold },
    { weight: 'extraBold', text: testText, fontFamily: FONT_FAMILY.extraBold },
    { weight: 'black', text: testText, fontFamily: FONT_FAMILY.black },
  ];
};

export default {
  validateFontRendering,
  getFontTestSamples,
  getFontWeightTests,
};